@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
    @:#nullable disable

}
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
    @:using @namespaceName;
    }
}

//Generated from Custom Template.
namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var serviceInterfaceType = "I" + Model.ModelTypeName + "Service";
    var serviceInterfaceName = Model.ModelVariable + "Service";
    var constructorLine = "public " + Model.ControllerName + "(" + serviceInterfaceType + " " + serviceInterfaceName + ")";
    var modelType = Model.ModelTypeName + "Model";
    var listLine = "List<" + modelType + "> " + Model.ModelVariable + "List = null;";
    var okLine = "return Ok(" + Model.ModelVariable + "List);";
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        // Add service injections here
        private readonly @serviceInterfaceType @("_" + serviceInterfaceName);

        @constructorLine
        {
            @("_" + serviceInterfaceName) = @serviceInterfaceName;
        }

        // GET: @routePrefix
        [HttpGet]
        public IActionResult Get()
        {
            @listLine // TODO: Add get list service logic here
            @okLine
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public IActionResult Get(@primaryKeyShortTypeName id)
        {
            @modelType @Model.ModelVariable = null; // TODO: Add get item service logic here
			if (@Model.ModelVariable == null)
            {
                return NotFound();
            }
			return Ok(@Model.ModelVariable);
        }

		// POST: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public IActionResult Post(@modelType @Model.ModelVariable)
        {
            // TODO: Add insert service logic here
			return CreatedAtAction("Get", new { id = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
        }

        // PUT: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        public IActionResult Put(@modelType @Model.ModelVariable)
        {
            // TODO: Add update service logic here
            return NoContent();
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public IActionResult Delete(@primaryKeyShortTypeName id)
        {
            // TODO: Add delete service logic here
            return NoContent();
        }
	}
}
